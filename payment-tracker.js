/**
 * üí≥ Payment Tracker - –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 * - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏–º—É–ª—è—Ç–æ—Ä—É
 * - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ blockchain —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */

class PaymentTracker {
  constructor() {
    this.firebase = null;
    this.db = null;
    this.isInitialized = false;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
  async initialize() {
    if (this.isInitialized) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ Firebase
      if (typeof firebase === 'undefined') {
        console.error('‚ùå Firebase not loaded');
        return false;
      }

      this.firebase = firebase;
      this.db = firebase.firestore();
      this.isInitialized = true;
      
      console.log('‚úÖ Payment Tracker initialized');
      return true;
    } catch (error) {
      console.error('‚ùå Failed to initialize Payment Tracker:', error);
      return false;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
  async createPaymentRecord(paymentData) {
    if (!this.isInitialized) {
      await this.initialize();
    }

    const paymentRecord = {
      userId: paymentData.userEmail || 'anonymous',
      simulator: paymentData.simulator,
      amount: paymentData.amount,
      currency: paymentData.currency,
      cryptoAddress: paymentData.cryptoAddress,
      transactionHash: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      status: 'pending',
      createdAt: firebase.firestore.FieldValue.serverTimestamp(),
      confirmedAt: null,
      accessExpiresAt: null,
      promoCode: paymentData.promoCode || null,
      originalPrice: paymentData.originalPrice || paymentData.amount,
      discount: paymentData.discount || 0
    };

    try {
      const docRef = await this.db.collection('purchases').add(paymentRecord);
      console.log('‚úÖ Payment record created:', docRef.id);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      localStorage.setItem('paymentId', docRef.id);
      
      return {
        success: true,
        paymentId: docRef.id,
        record: paymentRecord
      };
    } catch (error) {
      console.error('‚ùå Failed to create payment record:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
  async checkPaymentStatus(paymentId) {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      const doc = await this.db.collection('purchases').doc(paymentId).get();
      
      if (!doc.exists) {
        return {
          success: false,
          error: 'Payment record not found'
        };
      }

      const data = doc.data();
      return {
        success: true,
        status: data.status,
        record: data
      };
    } catch (error) {
      console.error('‚ùå Failed to check payment status:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ blockchain)
  async confirmPayment(paymentId, transactionHash) {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      const updateData = {
        status: 'confirmed',
        transactionHash: transactionHash,
        confirmedAt: firebase.firestore.FieldValue.serverTimestamp(),
        accessExpiresAt: this.calculateAccessExpiry()
      };

      await this.db.collection('purchases').doc(paymentId).update(updateData);
      
      console.log('‚úÖ Payment confirmed:', paymentId);
      return {
        success: true,
        message: 'Payment confirmed successfully'
      };
    } catch (error) {
      console.error('‚ùå Failed to confirm payment:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏–º—É–ª—è—Ç–æ—Ä—É
  async checkAccess(simulator, userId = null) {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      let query = this.db.collection('purchases')
        .where('simulator', '==', simulator)
        .where('status', '==', 'confirmed');

      if (userId) {
        query = query.where('userId', '==', userId);
      }

      const snapshot = await query.get();
      
      if (snapshot.empty) {
        return {
          hasAccess: false,
          reason: 'No confirmed payment found'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –¥–æ—Å—Ç—É–ø
      const now = new Date();
      for (const doc of snapshot.docs) {
        const data = doc.data();
        if (data.accessExpiresAt && data.accessExpiresAt.toDate() > now) {
          return {
            hasAccess: true,
            paymentId: doc.id,
            expiresAt: data.accessExpiresAt.toDate()
          };
        }
      }

      return {
        hasAccess: false,
        reason: 'Access expired'
      };
    } catch (error) {
      console.error('‚ùå Failed to check access:', error);
      return {
        hasAccess: false,
        reason: 'Error checking access'
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å blockchain —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  async verifyBlockchainTransaction(address, amount, currency) {
    try {
      let apiUrl = '';
      
      switch (currency) {
        case 'USDT':
        case 'USDC':
          // TronScan API –¥–ª—è TRC20 —Ç–æ–∫–µ–Ω–æ–≤
          apiUrl = `https://api.trongrid.io/v1/accounts/${address}/transactions/trc20?limit=20`;
          break;
        case 'BTC':
          // Blockchain.info API –¥–ª—è Bitcoin
          apiUrl = `https://blockchain.info/rawaddr/${address}?limit=20`;
          break;
        case 'ETH':
          // Etherscan API –¥–ª—è Ethereum
          apiUrl = `https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=20&sort=desc&apikey=YourApiKeyToken`;
          break;
        default:
          return {
            success: false,
            error: 'Unsupported currency'
          };
      }

      const response = await fetch(apiUrl);
      const data = await response.json();

      // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –Ω—É–∂–Ω–æ–π —Å—É–º–º–æ–π
      const transaction = this.findMatchingTransaction(data, amount, currency);
      
      if (transaction) {
        return {
          success: true,
          transaction: transaction,
          confirmed: true
        };
      } else {
        return {
          success: true,
          transaction: null,
          confirmed: false
        };
      }
    } catch (error) {
      console.error('‚ùå Failed to verify blockchain transaction:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  findMatchingTransaction(data, amount, currency) {
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
    // –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç API –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    
    if (currency === 'USDT' || currency === 'USDC') {
      // TronScan API —Ñ–æ—Ä–º–∞—Ç
      const transactions = data.data || [];
      return transactions.find(tx => 
        tx.value === (amount * 1000000).toString() && // USDT –∏–º–µ–µ—Ç 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        tx.token_info?.symbol === currency
      );
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç...
    return null;
  }

  // –í—ã—á–∏—Å–ª–∏—Ç—å –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
  calculateAccessExpiry() {
    const now = new Date();
    const expiry = new Date(now.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 –¥–Ω–µ–π
    return firebase.firestore.Timestamp.fromDate(expiry);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserPurchases(userId) {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      const snapshot = await this.db.collection('purchases')
        .where('userId', '==', userId)
        .orderBy('createdAt', 'desc')
        .get();

      const purchases = [];
      snapshot.forEach(doc => {
        purchases.push({
          id: doc.id,
          ...doc.data()
        });
      });

      return {
        success: true,
        purchases: purchases
      };
    } catch (error) {
      console.error('‚ùå Failed to get user purchases:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
  async sendPaymentConfirmation(paymentId) {
    try {
      const doc = await this.db.collection('purchases').doc(paymentId).get();
      const data = doc.data();

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email service
      if (window.SimpleEmailService) {
        const emailService = new window.SimpleEmailService();
        await emailService.sendPaymentConfirmation({
          simulator: data.simulator,
          amount: data.amount,
          currency: data.currency,
          paymentMethod: 'crypto',
          cryptoTransactionId: data.transactionHash,
          userEmail: data.userId,
          userName: 'Valued Customer'
        });
      }

      console.log('‚úÖ Payment confirmation sent');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Failed to send payment confirmation:', error);
      return { success: false, error: error.message };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.PaymentTracker = PaymentTracker;
