/**
 * üîç Firebase Connection Diagnostician
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Firebase
 * –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
 */

console.log('üîç Starting Firebase diagnostics...');

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function diagnoseFirebase() {
  console.log('=====================================');
  console.log('üîç FIREBASE CONNECTION DIAGNOSTICS');
  console.log('=====================================');
  
  const results = {
    firebaseSDK: false,
    firebaseConfig: false,
    firebaseApp: false,
    firestore: false,
    connection: false,
    rules: false
  };

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase SDK
  console.log('1Ô∏è‚É£ Checking Firebase SDK...');
  if (typeof firebase !== 'undefined') {
    console.log('‚úÖ Firebase SDK loaded');
    results.firebaseSDK = true;
  } else {
    console.log('‚ùå Firebase SDK not loaded');
    console.log('üîß SOLUTION: Add Firebase scripts to HTML');
    return results;
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  console.log('2Ô∏è‚É£ Checking Firebase configuration...');
  if (typeof window.firebaseConfig !== 'undefined') {
    const config = window.firebaseConfig;
    const requiredFields = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];
    const missingFields = requiredFields.filter(field => !config[field] || config[field].includes('your-') || config[field].includes('placeholder'));
    
    if (missingFields.length === 0) {
      console.log('‚úÖ Firebase configuration looks good');
      results.firebaseConfig = true;
    } else {
      console.log('‚ùå Firebase configuration incomplete');
      console.log('Missing or invalid fields:', missingFields);
      console.log('üîß SOLUTION: Update firebase-config.js with real data');
      return results;
    }
  } else {
    console.log('‚ùå Firebase configuration not found');
    console.log('üîß SOLUTION: Check firebase-config.js file');
    return results;
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase
  console.log('3Ô∏è‚É£ Checking Firebase app initialization...');
  try {
    const app = firebase.app();
    console.log('‚úÖ Firebase app initialized:', app.name);
    results.firebaseApp = true;
  } catch (error) {
    console.log('‚ùå Firebase app not initialized:', error.message);
    console.log('üîß SOLUTION: Check firebase-config.js and initialization');
    return results;
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Firestore
  console.log('4Ô∏è‚É£ Checking Firestore...');
  try {
    const db = firebase.firestore();
    console.log('‚úÖ Firestore instance created');
    results.firestore = true;
  } catch (error) {
    console.log('‚ùå Firestore not available:', error.message);
    console.log('üîß SOLUTION: Check Firebase project and Firestore setup');
    return results;
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  console.log('5Ô∏è‚É£ Testing database connection...');
  try {
    const db = firebase.firestore();
    const testDoc = await db.collection('_test').doc('connection-test').get();
    console.log('‚úÖ Database connection successful');
    results.connection = true;
  } catch (error) {
    console.log('‚ùå Database connection failed:', error.message);
    
    if (error.code === 'permission-denied') {
      console.log('üîß SOLUTION: Update Firestore security rules');
      console.log('1. Go to Firebase Console ‚Üí Firestore ‚Üí Rules');
      console.log('2. Replace with: allow read, write: if true;');
      console.log('3. Click Publish');
    } else if (error.code === 'not-found') {
      console.log('üîß SOLUTION: Enable Firestore in Firebase Console');
      console.log('1. Go to Firebase Console ‚Üí Firestore Database');
      console.log('2. Click "Create database"');
      console.log('3. Choose "Start in test mode"');
    } else {
      console.log('üîß SOLUTION: Check network connection and Firebase project status');
    }
    return results;
  }

  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  console.log('6Ô∏è‚É£ Testing security rules...');
  try {
    const db = firebase.firestore();
    const testData = {
      test: true,
      timestamp: firebase.firestore.FieldValue.serverTimestamp()
    };
    
    const docRef = await db.collection('purchases').add(testData);
    console.log('‚úÖ Security rules allow write operations');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await docRef.delete();
    console.log('‚úÖ Security rules allow delete operations');
    
    results.rules = true;
  } catch (error) {
    console.log('‚ùå Security rules test failed:', error.message);
    console.log('üîß SOLUTION: Update Firestore security rules');
    console.log('1. Go to Firebase Console ‚Üí Firestore ‚Üí Rules');
    console.log('2. Replace with:');
    console.log(`
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /purchases/{purchaseId} {
      allow read, write: if true;
    }
  }
}`);
    console.log('3. Click Publish');
    return results;
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('');
  console.log('=====================================');
  console.log('üìä DIAGNOSTIC RESULTS');
  console.log('=====================================');
  
  const allPassed = Object.values(results).every(result => result === true);
  
  if (allPassed) {
    console.log('üéâ ALL CHECKS PASSED!');
    console.log('‚úÖ Firebase SDK: OK');
    console.log('‚úÖ Configuration: OK');
    console.log('‚úÖ App initialization: OK');
    console.log('‚úÖ Firestore: OK');
    console.log('‚úÖ Database connection: OK');
    console.log('‚úÖ Security rules: OK');
    console.log('');
    console.log('üöÄ Your Firebase setup is working perfectly!');
  } else {
    console.log('‚ùå SOME CHECKS FAILED');
    console.log('Please fix the issues above and run diagnostics again.');
  }

  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async function quickCheck() {
  console.log('‚ö° Quick Firebase check...');
  
  try {
    if (typeof firebase === 'undefined') {
      console.log('‚ùå Firebase SDK not loaded');
      return false;
    }

    const db = firebase.firestore();
    await db.collection('_test').doc('quick-check').set({test: true});
    await db.collection('_test').doc('quick-check').delete();
    
    console.log('‚úÖ Quick check passed');
    return true;
  } catch (error) {
    console.log('‚ùå Quick check failed:', error.message);
    return false;
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (typeof window !== 'undefined') {
  // –í –±—Ä–∞—É–∑–µ—Ä–µ
  document.addEventListener('DOMContentLoaded', async function() {
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã Firebase —É—Å–ø–µ–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    setTimeout(async () => {
      await diagnoseFirebase();
    }, 2000);
  });
  
  // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
  window.diagnoseFirebase = diagnoseFirebase;
  window.quickCheck = quickCheck;
} else {
  // –í Node.js
  diagnoseFirebase();
}
