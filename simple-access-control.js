/**
 * üîê Simple Access Control - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –ë–ï–ó Firebase
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ localStorage
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è email –∏ –ø–ª–∞—Ç–µ–∂–∞
 * - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ checkout –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–∞
 * - –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ—Ñ–ª–∞–π–Ω
 */

class SimpleAccessControl {
  constructor() {
    this.isInitialized = true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏–º—É–ª—è—Ç–æ—Ä—É
  async checkSimulatorAccess(simulator, userEmail = null) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const testPaymentData = localStorage.getItem('testPaymentData');
    if (testPaymentData) {
      try {
        const testData = JSON.parse(testPaymentData);
        if (testData.simulator === simulator && testData.accessGranted) {
          console.log('‚úÖ Test access granted for:', simulator);
          return {
            hasAccess: true,
            source: 'test',
            email: testData.email,
            paymentId: testData.paymentId
          };
        }
      } catch (error) {
        console.error('‚ùå Error parsing test payment data:', error);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    const paymentData = localStorage.getItem('paymentData');
    if (!paymentData) {
      console.log('‚ùå No payment data found');
      return {
        hasAccess: false,
        reason: 'No payment data found',
        redirectTo: '/checkout.html?role=' + this.getSimulatorKey(simulator)
      };
    }

    try {
      const data = JSON.parse(paymentData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
      if (data.simulator !== simulator) {
        console.log('‚ùå Payment for different simulator:', data.simulator, 'expected:', simulator);
        return {
          hasAccess: false,
          reason: 'Payment for different simulator',
          redirectTo: '/checkout.html?role=' + this.getSimulatorKey(simulator)
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º email (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
      if (userEmail && data.userEmail !== userEmail) {
        console.log('‚ùå Email mismatch:', data.userEmail, 'expected:', userEmail);
        return {
          hasAccess: false,
          reason: 'Email mismatch',
          redirectTo: '/checkout.html?role=' + this.getSimulatorKey(simulator)
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (data.status !== 'confirmed' && data.status !== 'completed') {
        console.log('‚ùå Payment not confirmed:', data.status);
        return {
          hasAccess: false,
          reason: 'Payment not confirmed',
          redirectTo: '/checkout.html?role=' + this.getSimulatorKey(simulator)
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (30 –¥–Ω–µ–π)
      const createdAt = new Date(data.createdAt || data.timestamp);
      const expiresAt = new Date(createdAt.getTime() + (30 * 24 * 60 * 60 * 1000));
      
      if (expiresAt < new Date()) {
        console.log('‚ùå Access expired');
        return {
          hasAccess: false,
          reason: 'Access expired',
          redirectTo: '/checkout.html?role=' + this.getSimulatorKey(simulator)
        };
      }

      console.log('‚úÖ Access granted to:', simulator, 'until:', expiresAt.toLocaleDateString());
      return {
        hasAccess: true,
        paymentId: data.id || data.paymentId,
        expiresAt: expiresAt,
        simulator: data.simulator,
        userEmail: data.userEmail
      };
    } catch (error) {
      console.error('‚ùå Error checking access:', error);
      return {
        hasAccess: false,
        reason: 'Error checking access',
        redirectTo: '/checkout.html?role=' + this.getSimulatorKey(simulator)
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è URL
  getSimulatorKey(simulator) {
    const keys = {
      'ux-designer': 'ux-designer',
      'lawyer': 'lawyer',
      'copywriter': 'copywriter',
      'psychologist': 'psychologist',
      'brand-marketer': 'brand-marketer',
      'qa-engineer': 'qa-engineer'
    };
    return keys[simulator] || simulator;
  }

  // –ó–∞—â–∏—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä (middleware)
  async protectSimulator(simulator, userEmail = null) {
    const access = await this.checkSimulatorAccess(simulator, userEmail);
    
    if (!access.hasAccess) {
      console.log('‚ùå Access denied:', access.reason);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      this.showAccessDeniedModal(access.reason, access.redirectTo);
      
      return false;
    }
    
    console.log('‚úÖ Access granted to simulator:', simulator);
    return true;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ
  showAccessDeniedModal(reason, redirectTo) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black/50 flex items-center justify-center z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-2xl shadow-lg max-w-md w-full p-6 relative mx-4">
        <div class="text-center">
          <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 19.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-slate-900 mb-2">Access Required</h3>
          <p class="text-slate-600 mb-6">${this.getAccessDeniedMessage(reason)}</p>
          <div class="flex gap-3">
            <button onclick="window.location.href='/';" class="flex-1 bg-slate-100 text-slate-700 py-2 px-4 rounded-lg font-medium hover:bg-slate-200 transition-colors">
              Cancel
            </button>
            <a href="${redirectTo}" class="flex-1 bg-brand-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-brand-700 transition-colors text-center">
              Get Access
            </a>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      window.location.href = redirectTo;
    }, 5000);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
  getAccessDeniedMessage(reason) {
    switch (reason) {
      case 'No payment data found':
        return 'You need to purchase access to this simulator first.';
      case 'Access expired':
        return 'Your access to this simulator has expired. Please purchase again.';
      case 'Payment not confirmed':
        return 'Your payment is still being processed. Please wait for confirmation.';
      case 'Email mismatch':
        return 'Please use the same email address you used for payment.';
      case 'Payment for different simulator':
        return 'This payment was for a different simulator.';
      default:
        return 'Access to this simulator is required.';
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ URL –∏–ª–∏ localStorage
  getUserEmail() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const urlParams = new URLSearchParams(window.location.search);
    const emailFromUrl = urlParams.get('email');
    if (emailFromUrl) {
      return emailFromUrl;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const paymentData = localStorage.getItem('paymentData');
    if (paymentData) {
      try {
        const data = JSON.parse(paymentData);
        return data.userEmail;
      } catch (error) {
        console.error('‚ùå Error parsing payment data:', error);
      }
    }

    return null;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.SimpleAccessControl = SimpleAccessControl;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤
document.addEventListener('DOMContentLoaded', async function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
  const currentPath = window.location.pathname;
  const simulatorPages = [
    '/ux-sim-simple.html', 
    '/lawyer-simulator.html', 
    '/copywriter-simulator.html', 
    '/psychologist-simulator.html', 
    '/brand-marketer-simulator.html',
    '/qa-engineer-simulator.html',
    '/ux-sim.html'
  ];
  
  if (simulatorPages.includes(currentPath) || simulatorPages.some(page => currentPath.includes(page))) {
    const accessControl = new SimpleAccessControl();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ URL
    let simulator = 'ux-designer';
    if (currentPath.includes('lawyer')) {
      simulator = 'lawyer';
    } else if (currentPath.includes('copywriter')) {
      simulator = 'copywriter';
    } else if (currentPath.includes('psychologist')) {
      simulator = 'psychologist';
    } else if (currentPath.includes('brand-marketer')) {
      simulator = 'brand-marketer';
    } else if (currentPath.includes('qa-engineer')) {
      simulator = 'qa-engineer';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userEmail = accessControl.getUserEmail();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    const hasAccess = await accessControl.protectSimulator(simulator, userEmail);
    
    if (hasAccess) {
      console.log('‚úÖ Simulator access granted');
    }
  }
});
