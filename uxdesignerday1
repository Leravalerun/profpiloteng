import React, { useMemo, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { HelpCircle, CheckCircle2, ArrowRight } from "lucide-react";

// ---------- Shell & Primitives ----------
function Shell({ children }) {
  return (
    <div className="min-h-[100dvh] bg-gradient-to-br from-emerald-50 via-white to-sky-50">
      <div className="max-w-5xl mx-auto px-5 sm:px-6 lg:px-8 pb-32">{children}</div>
    </div>
  );
}

function GlassCard({ children, className = "" }) {
  return (
    <div className={`rounded-2xl border border-white/70 bg-white/80 backdrop-blur shadow-[0_6px_30px_rgba(16,185,129,0.08)] ${className}`}>{children}</div>
  );
}

function SectionTitle({ eyebrow, title, right }) {
  return (
    <div className="flex items-end justify-between gap-4">
      <div>
        {eyebrow && (
          <div className="text-xs tracking-wider uppercase text-emerald-700/70 mb-1">{eyebrow}</div>
        )}
        <h2 className="text-xl sm:text-2xl font-semibold text-gray-900">{title}</h2>
      </div>
      {right}
    </div>
  );
}

function Tooltip({ text }) {
  return (
    <span title={text} className="inline-flex items-center align-middle ml-1">
      <HelpCircle className="w-4 h-4 text-emerald-700/80" />
    </span>
  );
}

function Pill({ children }) {
  return (
    <span className="px-2.5 py-1 rounded-full text-xs font-medium bg-emerald-100 text-emerald-800 border border-emerald-200">{children}</span>
  );
}

function Progress({ value }) {
  return (
    <div className="w-44 h-2 rounded-full bg-gray-100 overflow-hidden border border-white/60">
      <div className="h-full bg-emerald-500" style={{ width: `${Math.min(100, Math.max(0, value))}%` }} />
    </div>
  );
}

// ---------- Data ----------
const CLICK_MAP_ROWS = [
  ["Contacts", "Filled by 93% of users"],
  ["Skills", "71% fill at least one skill field"],
  ["“About me”", "38% freeze here >60 seconds; 36% leave empty"],
  ["Work Experience", "Many click “Add” but skip filling details"],
  ["Save Button", "Barely clicked — form abandoned before saving"],
];

const QUESTIONS = [
  {
    id: 1,
    title: "Question 1",
    question: "What’s the main reason users fail at the ‘About me’ field?",
    options: [
      { value: "A", label: "It looks intimidating — users aren’t sure what to write and feel pressure" },
      { value: "B", label: "Too many fields — form looks overwhelming" },
      { value: "C", label: "No progress bar — users don’t know how much is left" },
      { value: "D", label: "Save button is too hidden" },
    ],
    explanation: {
      A: "Most users see ‘About me’ as a large scary text block, fearing to write something wrong or too important.",
      B: "Possible, but data shows freezing is mainly at one field.",
      C: "Motivates overall, but does not explain the precise freeze.",
      D: "Users drop off before reaching the save button, so this is not the cause.",
    },
  },
  {
    id: 2,
    title: "Question 2",
    question: "Why do 36% of users leave the ‘About me’ field empty without trying?",
    options: [
      { value: "A", label: "Fear of writing something wrong or boring" },
      { value: "B", label: "Interface is intimidating or uninviting" },
      { value: "C", label: "No examples or hints on how to start" },
      { value: "D", label: "They get distracted or postpone completing" },
    ],
    explanation: {
      A: "Core blocker: fear of ‘sounding wrong’. Usually pairs with C.",
      B: "Visual tone matters, but psychology + lack of scaffolding drive the drop-off.",
      C: "Key lever: examples/first-line prompts reduce blank‑page anxiety.",
      D: "Happens, but data suggests it’s secondary vs A + C.",
      default:
        "Most often it’s a combination of A + C: users are afraid because they don’t know how to start, and there are no helpful examples.",
    },
  },
  {
    id: 3,
    title: "Question 3 (multiple choice)",
    multiple: true,
    question:
      "What would you add to the interface to help users overcome fear and complete ‘About me’?",
    options: [
      { value: "A", label: "Hints and example texts directly inside the field" },
      { value: "B", label: "Motivating or supportive messages nearby" },
      { value: "C", label: "Breaking one big field into several simple questions" },
      { value: "D", label: "Gamification elements like progress bars or rewards" },
    ],
    explanation: {
      A: "Strong: removes ‘blank page’ effect; fastest path to writing.",
      B: "Helpful tone; boosts confidence. Smaller impact vs A/C.",
      C: "Strong: decomposes the task; highest impact on completion.",
      D: "Motivates, but does not directly reduce writing anxiety.",
      default:
        "All ideas are valid, but A and C are the most effective because they lower psychological barriers and simplify the task.",
    },
  },
  {
    id: 4,
    title: "Question 4",
    question:
      "If you were to conduct user research to better understand this issue, which data would you collect?",
    options: [
      { value: "A", label: "Session recordings (screen casts)" },
      { value: "B", label: "Surveys and interviews with real users" },
      { value: "C", label: "Analytics data on time spent per field" },
      { value: "D", label: "All of the above" },
    ],
    explanation: {
      A: "Shows where/when users hesitate — great for spotting friction.",
      B: "Explains motivations and language — reveals the ‘why’.",
      C: "Quantifies the problem — where users stall and for how long.",
      D: "Best: triangulate with qual + quant to de‑risk conclusions.",
      default:
        "The most complete approach is to combine all methods. The more data and perspectives, the better the diagnosis.",
    },
  },
  {
    id: 5,
    title: "Question 5",
    question: "Which metric would you consider key to measure whether UX fixes work?",
    options: [
      { value: "A", label: "Percentage of completed profiles" },
      { value: "B", label: "Time spent filling ‘About me’ field" },
      { value: "C", label: "Number of users who click ‘Save’" },
      { value: "D", label: "User satisfaction from surveys" },
    ],
    explanation: {
      A: "Primary outcome: did more users actually finish?",
      B: "Diagnostic: should trend down if UX improves.",
      C: "Proxy: can rise without final completion.",
      D: "Qual layer: interpret experience; pair with A.",
      default:
        "Completion rate is the most important metric, mixed with qualitative feedback to understand experience quality.",
    },
  },
];

// ---------- Interactive ----------
function ChoiceButton({ active, onClick, children }) {
  return (
    <button type="button" onClick={onClick} className={`w-full text-left rounded-xl px-4 py-3 border transition shadow-sm ${active ? "bg-emerald-600 text-white border-emerald-600" : "bg-white hover:bg-emerald-50/60 border-emerald-200"}`}>{children}</button>
  );
}

function QAItem({ item, onAnswered }) {
  const { options, explanation, multiple } = item;
  const [selected, setSelected] = useState(multiple ? [] : null);
  const [open, setOpen] = useState(false);
  const isSel = (v) => (multiple ? selected.includes(v) : selected === v);
  const choose = (v) => {
    if (multiple) {
      const next = isSel(v) ? selected.filter((x) => x !== v) : [...selected, v];
      setSelected(next); onAnswered?.(next); setOpen(true);
    } else { setSelected(v); onAnswered?.(v); setOpen(true); }
  };
  return (
    <GlassCard className="p-4">
      <div className="space-y-3">
        <ul className="list-none p-0 m-0 space-y-2">
          {options.map(({ value, label }) => (
            <li key={value}><ChoiceButton active={isSel(value)} onClick={() => choose(value)}><span className="font-semibold mr-2">{value})</span> {label}</ChoiceButton></li>
          ))}
        </ul>
        <AnimatePresence>
          {open && (
            <motion.div initial={{ opacity: 0, y: -6 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -6 }}>
              <div className="mt-3 rounded-xl border border-emerald-200 bg-emerald-50 p-3">
                {(() => {
                  const hasPerOption = Object.keys(explanation || {}).some((k) => k !== "default");
                  if (!hasPerOption) return <p>{explanation?.default}</p>;
                  if (multiple) {
                    const list = (selected.length ? selected : ["default"]).map((v) => (
                      <p key={v} className="flex items-start gap-2"><CheckCircle2 className="w-4 h-4 mt-0.5 flex-none text-emerald-600" /><span><strong>{v === "default" ? "" : `${v}: `}</strong>{explanation?.[v] ?? explanation?.default}</span></p>
                    ));
                    return <div className="space-y-1">{list}</div>;
                  }
                  return <p className="flex items-start gap-2"><CheckCircle2 className="w-4 h-4 mt-0.5 flex-none text-emerald-600" /><span>{explanation?.[selected] ?? explanation?.default}</span></p>;
                })()}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </GlassCard>
  );
}

function Reflection({ onComplete }) {
  const [text, setText] = useState("");
  const [sent, setSent] = useState(false);
  const submit = () => { setSent(true); onComplete(true); };
  return (
    <GlassCard className="p-4">
      {sent ? (
        <div className="flex items-start gap-3">
          <CheckCircle2 className="w-5 h-5 text-emerald-600 mt-1" />
          <div>
            <p className="font-semibold">Thank you for your reflection!</p>
            <blockquote className="italic mt-1 text-gray-800">{text}</blockquote>
          </div>
        </div>
      ) : (
        <div>
          <p className="mb-2">What surprised you most about user behavior today?</p>
          <textarea rows={4} className="w-full p-3 text-base border rounded-xl bg-white/70" value={text} onChange={(e) => setText(e.target.value)} />
          <div className="mt-2 flex gap-2">
            <button type="button" onClick={submit} disabled={!text.trim()} className={`px-4 py-2 rounded-xl text-white shadow-sm border ${text.trim() ? "bg-emerald-600 border-emerald-600" : "bg-gray-300 border-gray-300 cursor-not-allowed"}`}>Submit</button>
          </div>
        </div>
      )}
    </GlassCard>
  );
}

function NextDayCTA({ enabled }) {
  const go = () => {
    if (!enabled) return;
    try {
      window.location.assign('/day2');
    } catch (_) {}
  };
  return (
    <button
      type="button"
      onClick={go}
      aria-disabled={!enabled}
      disabled={!enabled}
      className={`inline-flex items-center gap-2 px-4 py-3 rounded-xl border shadow-sm ${
        enabled ? 'bg-emerald-600 text-white border-emerald-600 hover:bg-emerald-700' : 'bg-gray-300 text-gray-600 border-gray-300 cursor-not-allowed'
      }`}
    >
      Go to Day 2 <ArrowRight className="w-4 h-4" />
    </button>
  );
}

// ---------- Page ----------
export default function Day1Brand() {
  const [answers, setAnswers] = useState({});
  const [reflectionDone, setReflectionDone] = useState(false);
  const answeredCount = useMemo(() => Object.values(answers).filter((v) => (Array.isArray(v) ? v.length > 0 : !!v)).length, [answers]);
  const progress = Math.round((answeredCount / QUESTIONS.length) * 100);

  return (
    <Shell>
      {/* Sticky top bar */}
      <div className="sticky top-0 z-20 -mx-5 px-5 py-3 bg-white/70 backdrop-blur border-b flex items-center justify-between">
        <div className="font-semibold text-gray-900">Day 1 — Where do users get stuck — and why?</div>
        <div className="flex items-center gap-3"><Pill>{answeredCount}/{QUESTIONS.length} answered</Pill><Progress value={progress} /></div>
      </div>

      {/* Hero */}
      <div className="pt-6">
        <GlassCard className="p-6">
          <h1 className="text-2xl font-bold">Day 1 — Where do users get stuck — and why?</h1>
          <p className="text-gray-600 mt-2">Interactive case with data, psychology, and quick UX hypotheses.</p>
        </GlassCard>
      </div>

      {/* Product Context */}
      <div className="mt-8 space-y-4">
        <SectionTitle eyebrow="Context" title="Product Context" />
        <GlassCard className="p-6">
          <p>You work with a startup building a job search platform that helps people find jobs in a new way.</p>
          <p className="mt-2">Users register and enter their <strong>Dashboard</strong>, where they can:</p>
          <ul className="list-disc pl-6 mt-2 space-y-1">
            <li>
              Fill out a profile form and get an <strong>auto-generated resume</strong>
              <Tooltip text="A resume automatically created from your profile information." />
            </li>
            <li>Receive <strong>personalized job search tips</strong></li>
            <li>See <strong>relevant job vacancies</strong></li>
          </ul>
          <p className="mt-2">The profile form is the main entry point, but many users start filling it out and then stop before finishing.</p>
        </GlassCard>
      </div>

      {/* Click map */}
      <div className="mt-8 space-y-4">
        <SectionTitle eyebrow="Data" title="Interface & Click Map (shown on screen)" />
        <GlassCard className="p-0 overflow-hidden">
          <table className="w-full text-sm">
            <thead className="bg-emerald-50/80">
              <tr>
                <th className="text-left px-4 py-3">Section</th>
                <th className="text-left px-4 py-3">User behavior</th>
              </tr>
            </thead>
            <tbody>
              {CLICK_MAP_ROWS.map(([s, b], i) => (
                <tr key={s} className={i % 2 ? "bg-white/80" : "bg-emerald-50/40"}>
                  <td className="px-4 py-3 border-t border-white/60">{s}</td>
                  <td className="px-4 py-3 border-t border-white/60">{b}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </GlassCard>
      </div>

      {/* Team discussion with updated names */}
      <div className="mt-8 space-y-4">
        <SectionTitle eyebrow="Dialogue" title="Team Discussion" />
        <GlassCard className="p-6">
          <p><strong>Product Manager Josh:</strong> “We see a drop-off on the ‘About me’ field. Why do you think this happens? Is it the text? The design? Or is it psychological?”</p>
          <p className="mt-2"><strong>Team Lead Ally:</strong> “People fear writing about themselves. We shouldn’t rush to solution — first, we need to understand what exactly stops users, and if UX methods can help.”</p>
        </GlassCard>
      </div>

      {/* Task */}
      <div className="mt-8 space-y-4">
        <SectionTitle eyebrow="Case" title="Task" />
        <GlassCard className="p-6"><p>Analyze the interface and click data. What do you think causes users to stop filling the ‘About me’ field?</p></GlassCard>
      </div>

      {/* Questions */}
      <div className="mt-10 space-y-6">
        <SectionTitle eyebrow="Quiz" title="Questions" right={<Pill>Interactive</Pill>} />
        {QUESTIONS.map((q) => (
          <div key={q.id} className="space-y-2">
            <div className="text-base font-semibold">{q.title}</div>
            <div className="text-gray-900 font-medium mb-2">{q.question}</div>
            <QAItem item={q} onAnswered={(val) => setAnswers((p) => ({ ...p, [q.id]: val }))} />
          </div>
        ))}
      </div>

      {/* Glossary */}
      <div className="mt-12 space-y-4">
        <SectionTitle eyebrow="Glossary" title="Tooltips & Term Definitions" />
        <GlassCard className="p-6">
          <ul className="grid sm:grid-cols-2 gap-3 list-none p-0 m-0">
            <li><strong>Auto-generated resume</strong><Tooltip text="A resume automatically created from your profile information." /></li>
            <li><strong>Click heatmap</strong><Tooltip text="A colored map showing where users click most and least on the interface." /></li>
            <li><strong>Progress bar</strong><Tooltip text="Visual feedback showing how much of the form is completed." /></li>
            <li><strong>Session Recording (Screencast)</strong><Tooltip text="Video playback of user interactions on the site." /></li>
            <li><strong>Gamification</strong><Tooltip text="Adding game-like elements to encourage engagement and motivation." /></li>
          </ul>
        </GlassCard>
      </div>

      {/* Learning summary */}
      <div className="mt-12 space-y-4">
        <SectionTitle eyebrow="Outcomes" title="Learning Summary" />
        <GlassCard className="p-6">
          <ul className="list-disc pl-6 space-y-1">
            <li>Learn to analyze user behavior using real data, rather than assumptions</li>
            <li>Identify bottlenecks and understand psychological blockers</li>
            <li>Build hypotheses on design and user psychology causes</li>
          </ul>
        </GlassCard>
      </div>

      {/* Reflection */}
      <div className="mt-12 space-y-4">
        <SectionTitle eyebrow="Retro" title="Reflection" />
        <Reflection onComplete={setReflectionDone} />
      </div>

      {/* Floating actions */}
      <div className="fixed bottom-5 right-5 flex gap-3">
        <button
          type="button"
          className="px-4 py-2 rounded-xl shadow-sm border bg-white/80 hover:bg-white"
          onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
        >
          Back to top
        </button>
        <NextDayCTA enabled={reflectionDone} />
      </div>
    </Shell>
  );
}
