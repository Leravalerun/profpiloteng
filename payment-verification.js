/**
 * üí∞ Payment Verification System
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ blockchain explorer API
 */

class PaymentVerification {
  constructor() {
    this.explorerApis = {
      'BTC': 'https://blockstream.info/api/tx/',
      'ETH': 'https://api.etherscan.io/api',
      'USDT': 'https://api.etherscan.io/api',
      'USDC': 'https://api.etherscan.io/api',
      'MATIC': 'https://api.polygonscan.com/api'
    };
    
    this.apiKeys = {
      'ETH': 'YOUR_ETHERSCAN_API_KEY',
      'USDT': 'YOUR_ETHERSCAN_API_KEY',
      'USDC': 'YOUR_ETHERSCAN_API_KEY',
      'MATIC': 'YOUR_POLYGONSCAN_API_KEY'
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
  async verifyCryptoPayment(txHash, currency, fromAddress, toAddress, amount) {
    try {
      console.log('üîç Verifying payment:', { txHash, currency, fromAddress, toAddress, amount });

      switch (currency) {
        case 'BTC':
          return await this.verifyBitcoinPayment(txHash, fromAddress, toAddress, amount);
        case 'ETH':
        case 'USDT':
        case 'USDC':
        case 'MATIC':
          return await this.verifyEthereumPayment(txHash, currency, fromAddress, toAddress, amount);
        default:
          console.error('‚ùå Unsupported currency:', currency);
          return false;
      }
    } catch (error) {
      console.error('‚ùå Payment verification failed:', error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Bitcoin —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  async verifyBitcoinPayment(txHash, fromAddress, toAddress, expectedAmount) {
    try {
      console.log('üîç Checking Bitcoin transaction...');
      
      const response = await fetch(`https://blockstream.info/api/tx/${txHash}`);
      if (!response.ok) {
        console.error('‚ùå Transaction not found or network error');
        return false;
      }

      const tx = await response.json();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (!tx.status || !tx.status.confirmed) {
        console.log('‚è≥ Transaction not confirmed yet');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥—ã (–≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞)
      const outputs = tx.vout || [];
      let receivedAmount = 0;
      let correctRecipient = false;

      for (const output of outputs) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
        if (output.scriptpubkey_address === toAddress) {
          correctRecipient = true;
          receivedAmount = output.value / 100000000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ satoshi –≤ BTC
        }
      }

      console.log('üìä Verification result:', {
        confirmed: tx.status.confirmed,
        correctRecipient,
        receivedAmount,
        expectedAmount,
        match: correctRecipient && receivedAmount >= expectedAmount - 0.0001 // –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
      });

      return correctRecipient && receivedAmount >= expectedAmount - 0.0001;
    } catch (error) {
      console.error('‚ùå Bitcoin verification error:', error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Ethereum —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω—ã)
  async verifyEthereumPayment(txHash, currency, fromAddress, toAddress, expectedAmount) {
    try {
      console.log('üîç Checking Ethereum transaction...');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç—å –∏ API endpoint
      let apiEndpoint, apiKey;
      
      if (currency === 'MATIC') {
        apiEndpoint = 'https://api.polygonscan.com/api';
        apiKey = this.apiKeys.MATIC;
      } else {
        apiEndpoint = 'https://api.etherscan.io/api';
        apiKey = this.apiKeys.ETH;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const txResponse = await fetch(
        `${apiEndpoint}?module=proxy&action=eth_getTransactionByHash&txhash=${txHash}&apikey=${apiKey}`
      );
      
      if (!txResponse.ok) {
        console.error('‚ùå Transaction not found');
        return false;
      }

      const txData = await txResponse.json();
      
      if (!txData.result || !txData.result.hash) {
        console.error('‚ùå Invalid transaction data');
        return false;
      }

      const tx = txData.result;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      if (tx.to.toLowerCase() !== toAddress.toLowerCase()) {
        console.log('‚ùå Recipient address mismatch');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const receiptResponse = await fetch(
        `${apiEndpoint}?module=transaction&action=gettxreceiptstatus&txhash=${txHash}&apikey=${apiKey}`
      );
      
      const receiptData = await receiptResponse.json();
      
      if (receiptData.result && receiptData.result.status === '0') {
        console.log('‚ùå Transaction failed');
        return false;
      }

      // –î–ª—è ETH –ø—Ä–æ–≤–µ—Ä—è–µ–º value
      let receivedAmount;
      if (currency === 'ETH') {
        receivedAmount = parseInt(tx.value) / 1e18; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ wei
      } else {
        // –î–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        console.log('‚úÖ Transaction verified for token:', currency);
        return true; // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
      }

      console.log('üìä Verification result:', {
        receivedAmount,
        expectedAmount,
        match: receivedAmount >= expectedAmount - 0.0001
      });

      return receivedAmount >= expectedAmount - 0.0001;
    } catch (error) {
      console.error('‚ùå Ethereum verification error:', error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—Ä—É—á–Ω—É—é (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  async checkTransactionStatus(txHash, currency) {
    try {
      let explorerUrl;
      
      switch (currency) {
        case 'BTC':
          explorerUrl = `https://blockstream.info/tx/${txHash}`;
          break;
        case 'ETH':
          explorerUrl = `https://etherscan.io/tx/${txHash}`;
          break;
        case 'USDT':
        case 'USDC':
          explorerUrl = `https://etherscan.io/tx/${txHash}`;
          break;
        case 'MATIC':
          explorerUrl = `https://polygonscan.com/tx/${txHash}`;
          break;
        default:
          return null;
      }

      return {
        verified: false,
        pending: true,
        explorerUrl
      };
    } catch (error) {
      console.error('‚ùå Error checking transaction:', error);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç hash
  isValidTxHash(hash, currency) {
    const patterns = {
      'BTC': /^[a-fA-F0-9]{64}$/,
      'ETH': /^0x[a-fA-F0-9]{64}$/,
      'USDT': /^0x[a-fA-F0-9]{64}$/,
      'USDC': /^0x[a-fA-F0-9]{64}$/,
      'MATIC': /^0x[a-fA-F0-9]{64}$/
    };

    return patterns[currency]?.test(hash) || false;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.PaymentVerification = PaymentVerification;

/**
 * üîç –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * 
 * // 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 * const verifier = new PaymentVerification();
 * const isValid = await verifier.verifyCryptoPayment(
 *   '0x123...',
 *   'ETH',
 *   '0xfrom...',
 *   '0xto...',
 *   0.029
 * );
 * 
 * // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * const status = await verifier.checkTransactionStatus(
 *   '0x123...',
 *   'ETH'
 * );
 * 
 * // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç hash
 * const isValid = verifier.isValidTxHash('0x123...', 'ETH');
 */
