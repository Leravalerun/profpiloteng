/**
 * üîç Firestore Rules Checker
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Firestore
 * –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */

console.log('üîç Checking Firestore rules...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª
async function checkFirestoreRules() {
  try {
    if (typeof firebase === 'undefined') {
      console.error('‚ùå Firebase not loaded');
      return;
    }

    const db = firebase.firestore();
    
    // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    console.log('üß™ Testing write permissions...');
    
    const testData = {
      userId: 'test@example.com',
      simulator: 'ux-designer',
      amount: 29.00,
      currency: 'USD',
      status: 'test',
      createdAt: firebase.firestore.FieldValue.serverTimestamp(),
      testRecord: true
    };

    const docRef = await db.collection('purchases').add(testData);
    console.log('‚úÖ Write test successful:', docRef.id);

    // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    console.log('üß™ Testing read permissions...');
    const snapshot = await db.collection('purchases').limit(1).get();
    console.log('‚úÖ Read test successful:', snapshot.size, 'records found');

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    console.log('üß™ Testing delete permissions...');
    await docRef.delete();
    console.log('‚úÖ Delete test successful');

    console.log('üéâ All Firestore rules tests passed!');
    return true;

  } catch (error) {
    console.error('‚ùå Firestore rules test failed:', error);
    
    if (error.code === 'permission-denied') {
      console.log('');
      console.log('üîß SOLUTION: Update Firestore rules in Firebase Console');
      console.log('1. Go to: https://console.firebase.google.com/');
      console.log('2. Select project: profpiloteng');
      console.log('3. Go to Firestore Database ‚Üí Rules');
      console.log('4. Replace rules with:');
      console.log(`
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /purchases/{purchaseId} {
      allow read, write: if true;
    }
  }
}`);
      console.log('5. Click "Publish"');
    }
    
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function checkFirebaseConfig() {
  console.log('üîç Checking Firebase configuration...');
  
  if (typeof firebase === 'undefined') {
    console.error('‚ùå Firebase SDK not loaded');
    return false;
  }

  if (typeof window.firebaseConfig === 'undefined') {
    console.error('‚ùå Firebase config not found');
    return false;
  }

  const config = window.firebaseConfig;
  const requiredFields = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];
  
  for (const field of requiredFields) {
    if (!config[field] || config[field].includes('your-') || config[field].includes('placeholder')) {
      console.error(`‚ùå Firebase config field '${field}' is not properly configured`);
      return false;
    }
  }

  console.log('‚úÖ Firebase configuration looks good');
  return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async function runFirebaseCheck() {
  console.log('üöÄ Starting Firebase system check...');
  console.log('=====================================');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const configOk = checkFirebaseConfig();
  if (!configOk) {
    console.log('‚ùå Configuration check failed. Please fix firebase-config.js');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ Firestore
  const rulesOk = await checkFirestoreRules();
  if (!rulesOk) {
    console.log('‚ùå Firestore rules check failed. Please update rules in Firebase Console');
    return;
  }

  console.log('');
  console.log('üéâ All checks passed! Firebase is ready to use.');
  console.log('‚úÖ Configuration: OK');
  console.log('‚úÖ Firestore rules: OK');
  console.log('‚úÖ Database access: OK');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
if (typeof window !== 'undefined') {
  // –í –±—Ä–∞—É–∑–µ—Ä–µ
  document.addEventListener('DOMContentLoaded', runFirebaseCheck);
} else {
  // –í Node.js
  runFirebaseCheck();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof window !== 'undefined') {
  window.checkFirebaseConfig = checkFirebaseConfig;
  window.checkFirestoreRules = checkFirestoreRules;
  window.runFirebaseCheck = runFirebaseCheck;
}
